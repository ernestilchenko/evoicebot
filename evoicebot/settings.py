"""
Django settings for evoicebot project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import json
import os
from pathlib import Path

from celery.schedules import crontab
from django.contrib import staticfiles
from dotenv import load_dotenv
from google.oauth2 import service_account

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-l2)*ifxw)j)h5e!0)^!)7zsas)k6a#bg^x(m$$w@_ao80-tp@3')

DEBUG = True

ALLOWED_HOSTS = ['voicebot.fun', 'www.voicebot.fun', 'localhost', '127.0.0.1',
                 'evoicebot-production.up.railway.app']

CSRF_TRUSTED_ORIGINS = [
    'https://voicebot.fun',
    'https://www.voicebot.fun',
    'http://voicebot.fun',
    'http://www.voicebot.fun',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'https://evoicebot-production.up.railway.app'
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'evoicebot_app',
    'storages',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.telegram',
    'django_celery_beat',
    'django_celery_results',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

ROOT_URLCONF = 'evoicebot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'evoicebot.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('PGDATABASE'),
        'USER': os.getenv('PGUSER'),
        'PASSWORD': os.getenv('PGPASSWORD'),
        'HOST': os.getenv('PGHOST'),
        'PORT': os.getenv('PGPORT'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Europe/Warsaw'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

GS_BUCKET_NAME = os.getenv('GS_BUCKET_NAME', 'voicebot_storage')
GOOGLE_CREDENTIALS = os.getenv('GOOGLE_CREDENTIALS')

if GOOGLE_CREDENTIALS:
    try:
        credentials_dict = json.loads(GOOGLE_CREDENTIALS)
        GS_CREDENTIALS = service_account.Credentials.from_service_account_info(credentials_dict)

        STORAGES = {
            "default": {
                "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
                "OPTIONS": {
                    "bucket_name": GS_BUCKET_NAME,
                    "credentials": GS_CREDENTIALS,
                    "location": "media",
                    "querystring_auth": False,
                },
            },
            "staticfiles": {
                "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
            },
        }

        MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'
        print("Using Google Cloud Storage for media files")
    except Exception as e:
        print(f"Error setting up Google Cloud Storage: {e}")
        STORAGES = {
            "staticfiles": {
                "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
            },
        }
        MEDIA_URL = '/media/'
        print("Using local storage for media files (GCS error)")
else:
    STORAGES = {
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }
    MEDIA_URL = '/media/'
    print("Using local storage for media files (no GCS credentials)")

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

LOGIN_REDIRECT_URL = 'dashboard'
ACCOUNT_LOGOUT_REDIRECT_URL = 'main'

ACCOUNT_LOGIN_METHODS = {'email', 'username'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'optional'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'telegram': {
        'APP': {
            'client_id': os.getenv('TOKEN_ID'),
            'secret': os.getenv('TOKEN_TELEGRAM'),
        },
        'AUTH_PARAMS': {'auth_date_validity': 30},
    }
}

SITE_DOMAIN = 'voicebot.fun'
SITE_NAME = 'voicebot'
SITE_ID = 1
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_USERNAME_REQUIRED = False
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_ADAPTER = 'evoicebot_app.adapters.CustomSocialAccountAdapter'
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

CELERY_BROKER_URL = os.getenv('REDIS_URL')
CELERY_RESULT_BACKEND = os.getenv('REDIS_URL')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Warsaw'
CELERY_RESULT_EXPIRES = 3600
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

CELERY_BEAT_SCHEDULE = {
    'cleanup-old-files': {
        'task': 'evoicebot_app.tasks.cleanup_old_files',
        'schedule': crontab(hour=2, minute=0),
    },
    'send-expiry-notifications': {
        'task': 'evoicebot_app.tasks.send_document_expiry_notifications',
        'schedule': crontab(hour=8, minute=0),
    },
    'send-daily-deadline-reminders': {
        'task': 'evoicebot_app.tasks.send_daily_deadline_reminders',
        'schedule': crontab(hour=9, minute=0),
    },
    'send-weekly-deadline-reminders': {
        'task': 'evoicebot_app.tasks.send_weekly_deadline_reminders',
        'schedule': crontab(hour=9, minute=0, day_of_week=1),
    },
    'update-call-statuses': {
        'task': 'evoicebot_app.tasks.update_call_statuses',
        'schedule': crontab(minute='*/5'),
    },
    'check-failed-calls-and-retry': {
        'task': 'evoicebot_app.tasks.check_failed_calls_and_retry',
        'schedule': crontab(minute='*/30'),
    },
    'send-daily-report': {
        'task': 'evoicebot_app.tasks.send_daily_report',
        'schedule': crontab(hour=18, minute=0),
    },
    'cleanup-old-calls': {
        'task': 'evoicebot_app.tasks.cleanup_old_calls',
        'schedule': crontab(hour=3, minute=0, day_of_week=0),
    },
}

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@voicebot.fun'

TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER')
